{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///SPWidget.min.js","webpack:///webpack/bootstrap f7cec621c85f61851289","webpack:///./src/index.js","webpack:///./~/whatwg-fetch/fetch.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_classCallCheck","instance","Constructor","TypeError","getSongData","songId","_this3","url","fetch","then","response","ok","json","console","error","data","Object","defineProperty","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","SPWidget","params","primaryColor","artist","title","previewUrl","externalUrl","player","Audio","playButton","playhead","timeline","element","log","paused","play","pause","children","setAttribute","document","getElementById","playPercent","offsetWidth","currentTime","duration","style","left","_this","songPromise","result","name","artists","imageUrl","album","images","external_urls","spotify","preview_url","src","onplay","buttonPlaying","onpause","buttonPaused","ontimeupdate","updateTime","displayPlayer","_this2","widget","querySelector","htmlString","innerHTML","background","onclick","togglePlay","self","normalizeName","String","test","toLowerCase","normalizeValue","iteratorFor","items","iterator","next","shift","done","undefined","support","iterable","Symbol","Headers","headers","map","forEach","append","getOwnPropertyNames","consumed","body","bodyUsed","Promise","reject","fileReaderReady","reader","resolve","onload","onerror","readBlobAsArrayBuffer","blob","FileReader","readAsArrayBuffer","readBlobAsText","readAsText","Body","_initBody","_bodyInit","_bodyText","Blob","isPrototypeOf","_bodyBlob","formData","FormData","_bodyFormData","searchParams","URLSearchParams","toString","arrayBuffer","ArrayBuffer","Error","get","set","type","rejected","text","decode","JSON","parse","normalizeMethod","method","upcased","toUpperCase","methods","indexOf","Request","input","options","credentials","mode","referrer","form","trim","split","bytes","replace","join","decodeURIComponent","xhr","head","pairs","getAllResponseHeaders","header","Response","bodyInit","status","statusText","e","list","push","values","getAll","has","hasOwnProperty","callback","thisArg","keys","entries","clone","redirectStatuses","redirect","RangeError","location","init","responseURL","getResponseHeader","request","XMLHttpRequest","responseText","ontimeout","open","withCredentials","responseType","setRequestHeader","send","polyfill"],"mappings":"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","file":"SPWidget.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SPWidget\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SPWidget\"] = factory();\n\telse\n\t\troot[\"SPWidget\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SPWidget\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SPWidget\"] = factory();\n\telse\n\t\troot[\"SPWidget\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\t__webpack_require__(1);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar SPWidget = function () {\n\t  function SPWidget(params) {\n\t    _classCallCheck(this, SPWidget);\n\t\n\t    this.songId = '';\n\t    this.primaryColor = '';\n\t    this.artist = '';\n\t    this.title = '';\n\t    this.previewUrl = '';\n\t    this.externalUrl = '';\n\t    this.player = new Audio();\n\t    this.playButton = {};\n\t    this.playhead = {};\n\t    this.timeline = {};\n\t    this.element = '#SPWidget';\n\t\n\t    if (params) {\n\t      this.songId = params.songId;\n\t      console.log(params);\n\t\n\t      this.primaryColor = params.primaryColor || '#89aeed';\n\t      this.element = params.element || '#SPWidget';\n\t    } else {\n\t      console.error('No parameters were provided.');\n\t    }\n\t  }\n\t\n\t  _createClass(SPWidget, [{\n\t    key: 'togglePlay',\n\t    value: function togglePlay() {\n\t      if (this.player.paused) {\n\t        this.player.play();\n\t      } else {\n\t        this.player.pause();\n\t      }\n\t    }\n\t  }, {\n\t    key: 'buttonPlaying',\n\t    value: function buttonPlaying() {\n\t      if (this.playButton) {\n\t        //set new class of icon\n\t        this.playButton.children[0].setAttribute(\"class\", \"fa fa-pause\");\n\t        document.getElementById('bars').setAttribute(\"class\", \"playing\");\n\t      }\n\t    }\n\t  }, {\n\t    key: 'buttonPaused',\n\t    value: function buttonPaused() {\n\t      if (this.playButton) {\n\t        this.playButton.children[0].setAttribute(\"class\", \"fa fa-play\");\n\t        document.getElementById('bars').setAttribute(\"class\", \"paused\");\n\t      }\n\t    }\n\t  }, {\n\t    key: 'updateTime',\n\t    value: function updateTime() {\n\t      var playPercent = (this.timeline.offsetWidth - this.playhead.offsetWidth) * (this.player.currentTime / this.player.duration);\n\t      this.playhead.style.left = playPercent + \"px\";\n\t    }\n\t  }, {\n\t    key: 'start',\n\t    value: function start() {\n\t      var _this = this;\n\t\n\t      var songPromise = getSongData(this.songId);\n\t      songPromise.then(function (result) {\n\t\n\t        _this.title = result.name;\n\t        _this.artist = result.artists[0].name;\n\t        _this.imageUrl = result.album.images[0].url;\n\t        _this.externalUrl = result.external_urls.spotify;\n\t        _this.previewUrl = result.preview_url;\n\t        _this.player.src = result.preview_url;\n\t\n\t        _this.player.onplay = function () {\n\t          return _this.buttonPlaying();\n\t        };\n\t        _this.player.onpause = function () {\n\t          return _this.buttonPaused();\n\t        };\n\t        _this.player.ontimeupdate = function () {\n\t          return _this.updateTime();\n\t        };\n\t\n\t        console.log(_this);\n\t        _this.displayPlayer();\n\t      });\n\t    }\n\t  }, {\n\t    key: 'displayPlayer',\n\t    value: function displayPlayer() {\n\t      var _this2 = this;\n\t\n\t      var widget = document.querySelector(this.element);\n\t      if (widget) {\n\t        var htmlString = '<img id=\"album-image\" src=' + this.imageUrl + '></img>\\n                        <a href=\"' + this.externalUrl + '\" class=\"link-to-song\"><i class=\"fa fa-spotify\"></i></a>\\n                        <div id=\"info\">\\n                            <div id=\"bars\">\\n                                <div class=\"bar one\"></div>\\n                                <div class=\"bar two\"></div>\\n                                <div class=\"bar three\"></div>\\n                            </div>\\n                            <div class=\"artist\">' + this.artist + '</div>\\n                            <div class=\"song-name\">' + this.title + '</div>\\n                            <div id=\"play-button\" class=\"paused\">\\n                                <i class=\"fa fa-play\"></i>\\n                            </div>\\n                            <div id=\"timeline\">\\n                                <div id=\"playhead\"></div>\\n                            </div>\\n                        </div>';\n\t\n\t        widget.innerHTML = htmlString;\n\t\n\t        this.playButton = document.getElementById('play-button');\n\t        this.playhead = document.getElementById('playhead');\n\t        this.timeline = document.getElementById('timeline');\n\t\n\t        widget.style.background = this.primaryColor;\n\t\n\t        this.playButton.onclick = function () {\n\t          return _this2.togglePlay();\n\t        };\n\t      } else {\n\t        console.log('No div with id SPWidget was found');\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return SPWidget;\n\t}();\n\t\n\texports.default = SPWidget;\n\t\n\t\n\tfunction getSongData(songId) {\n\t  var _this3 = this;\n\t\n\t  var url = 'https://api.spotify.com/v1/tracks/' + songId;\n\t\n\t  return fetch(url).then(function (response) {\n\t    if (response.ok) {\n\t      return response.json();\n\t    } else {\n\t      console.error('Error in song id entered: ' + _this3.songId);\n\t    }\n\t  }).then(function (data) {\n\t    return data;\n\t  });\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t(function(self) {\n\t  'use strict';\n\t\n\t  if (self.fetch) {\n\t    return\n\t  }\n\t\n\t  var support = {\n\t    searchParams: 'URLSearchParams' in self,\n\t    iterable: 'Symbol' in self && 'iterator' in Symbol,\n\t    blob: 'FileReader' in self && 'Blob' in self && (function() {\n\t      try {\n\t        new Blob()\n\t        return true\n\t      } catch(e) {\n\t        return false\n\t      }\n\t    })(),\n\t    formData: 'FormData' in self,\n\t    arrayBuffer: 'ArrayBuffer' in self\n\t  }\n\t\n\t  function normalizeName(name) {\n\t    if (typeof name !== 'string') {\n\t      name = String(name)\n\t    }\n\t    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n\t      throw new TypeError('Invalid character in header field name')\n\t    }\n\t    return name.toLowerCase()\n\t  }\n\t\n\t  function normalizeValue(value) {\n\t    if (typeof value !== 'string') {\n\t      value = String(value)\n\t    }\n\t    return value\n\t  }\n\t\n\t  // Build a destructive iterator for the value list\n\t  function iteratorFor(items) {\n\t    var iterator = {\n\t      next: function() {\n\t        var value = items.shift()\n\t        return {done: value === undefined, value: value}\n\t      }\n\t    }\n\t\n\t    if (support.iterable) {\n\t      iterator[Symbol.iterator] = function() {\n\t        return iterator\n\t      }\n\t    }\n\t\n\t    return iterator\n\t  }\n\t\n\t  function Headers(headers) {\n\t    this.map = {}\n\t\n\t    if (headers instanceof Headers) {\n\t      headers.forEach(function(value, name) {\n\t        this.append(name, value)\n\t      }, this)\n\t\n\t    } else if (headers) {\n\t      Object.getOwnPropertyNames(headers).forEach(function(name) {\n\t        this.append(name, headers[name])\n\t      }, this)\n\t    }\n\t  }\n\t\n\t  Headers.prototype.append = function(name, value) {\n\t    name = normalizeName(name)\n\t    value = normalizeValue(value)\n\t    var list = this.map[name]\n\t    if (!list) {\n\t      list = []\n\t      this.map[name] = list\n\t    }\n\t    list.push(value)\n\t  }\n\t\n\t  Headers.prototype['delete'] = function(name) {\n\t    delete this.map[normalizeName(name)]\n\t  }\n\t\n\t  Headers.prototype.get = function(name) {\n\t    var values = this.map[normalizeName(name)]\n\t    return values ? values[0] : null\n\t  }\n\t\n\t  Headers.prototype.getAll = function(name) {\n\t    return this.map[normalizeName(name)] || []\n\t  }\n\t\n\t  Headers.prototype.has = function(name) {\n\t    return this.map.hasOwnProperty(normalizeName(name))\n\t  }\n\t\n\t  Headers.prototype.set = function(name, value) {\n\t    this.map[normalizeName(name)] = [normalizeValue(value)]\n\t  }\n\t\n\t  Headers.prototype.forEach = function(callback, thisArg) {\n\t    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n\t      this.map[name].forEach(function(value) {\n\t        callback.call(thisArg, value, name, this)\n\t      }, this)\n\t    }, this)\n\t  }\n\t\n\t  Headers.prototype.keys = function() {\n\t    var items = []\n\t    this.forEach(function(value, name) { items.push(name) })\n\t    return iteratorFor(items)\n\t  }\n\t\n\t  Headers.prototype.values = function() {\n\t    var items = []\n\t    this.forEach(function(value) { items.push(value) })\n\t    return iteratorFor(items)\n\t  }\n\t\n\t  Headers.prototype.entries = function() {\n\t    var items = []\n\t    this.forEach(function(value, name) { items.push([name, value]) })\n\t    return iteratorFor(items)\n\t  }\n\t\n\t  if (support.iterable) {\n\t    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n\t  }\n\t\n\t  function consumed(body) {\n\t    if (body.bodyUsed) {\n\t      return Promise.reject(new TypeError('Already read'))\n\t    }\n\t    body.bodyUsed = true\n\t  }\n\t\n\t  function fileReaderReady(reader) {\n\t    return new Promise(function(resolve, reject) {\n\t      reader.onload = function() {\n\t        resolve(reader.result)\n\t      }\n\t      reader.onerror = function() {\n\t        reject(reader.error)\n\t      }\n\t    })\n\t  }\n\t\n\t  function readBlobAsArrayBuffer(blob) {\n\t    var reader = new FileReader()\n\t    reader.readAsArrayBuffer(blob)\n\t    return fileReaderReady(reader)\n\t  }\n\t\n\t  function readBlobAsText(blob) {\n\t    var reader = new FileReader()\n\t    reader.readAsText(blob)\n\t    return fileReaderReady(reader)\n\t  }\n\t\n\t  function Body() {\n\t    this.bodyUsed = false\n\t\n\t    this._initBody = function(body) {\n\t      this._bodyInit = body\n\t      if (typeof body === 'string') {\n\t        this._bodyText = body\n\t      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n\t        this._bodyBlob = body\n\t      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n\t        this._bodyFormData = body\n\t      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n\t        this._bodyText = body.toString()\n\t      } else if (!body) {\n\t        this._bodyText = ''\n\t      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {\n\t        // Only support ArrayBuffers for POST method.\n\t        // Receiving ArrayBuffers happens via Blobs, instead.\n\t      } else {\n\t        throw new Error('unsupported BodyInit type')\n\t      }\n\t\n\t      if (!this.headers.get('content-type')) {\n\t        if (typeof body === 'string') {\n\t          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n\t        } else if (this._bodyBlob && this._bodyBlob.type) {\n\t          this.headers.set('content-type', this._bodyBlob.type)\n\t        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n\t          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n\t        }\n\t      }\n\t    }\n\t\n\t    if (support.blob) {\n\t      this.blob = function() {\n\t        var rejected = consumed(this)\n\t        if (rejected) {\n\t          return rejected\n\t        }\n\t\n\t        if (this._bodyBlob) {\n\t          return Promise.resolve(this._bodyBlob)\n\t        } else if (this._bodyFormData) {\n\t          throw new Error('could not read FormData body as blob')\n\t        } else {\n\t          return Promise.resolve(new Blob([this._bodyText]))\n\t        }\n\t      }\n\t\n\t      this.arrayBuffer = function() {\n\t        return this.blob().then(readBlobAsArrayBuffer)\n\t      }\n\t\n\t      this.text = function() {\n\t        var rejected = consumed(this)\n\t        if (rejected) {\n\t          return rejected\n\t        }\n\t\n\t        if (this._bodyBlob) {\n\t          return readBlobAsText(this._bodyBlob)\n\t        } else if (this._bodyFormData) {\n\t          throw new Error('could not read FormData body as text')\n\t        } else {\n\t          return Promise.resolve(this._bodyText)\n\t        }\n\t      }\n\t    } else {\n\t      this.text = function() {\n\t        var rejected = consumed(this)\n\t        return rejected ? rejected : Promise.resolve(this._bodyText)\n\t      }\n\t    }\n\t\n\t    if (support.formData) {\n\t      this.formData = function() {\n\t        return this.text().then(decode)\n\t      }\n\t    }\n\t\n\t    this.json = function() {\n\t      return this.text().then(JSON.parse)\n\t    }\n\t\n\t    return this\n\t  }\n\t\n\t  // HTTP methods whose capitalization should be normalized\n\t  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\t\n\t  function normalizeMethod(method) {\n\t    var upcased = method.toUpperCase()\n\t    return (methods.indexOf(upcased) > -1) ? upcased : method\n\t  }\n\t\n\t  function Request(input, options) {\n\t    options = options || {}\n\t    var body = options.body\n\t    if (Request.prototype.isPrototypeOf(input)) {\n\t      if (input.bodyUsed) {\n\t        throw new TypeError('Already read')\n\t      }\n\t      this.url = input.url\n\t      this.credentials = input.credentials\n\t      if (!options.headers) {\n\t        this.headers = new Headers(input.headers)\n\t      }\n\t      this.method = input.method\n\t      this.mode = input.mode\n\t      if (!body) {\n\t        body = input._bodyInit\n\t        input.bodyUsed = true\n\t      }\n\t    } else {\n\t      this.url = input\n\t    }\n\t\n\t    this.credentials = options.credentials || this.credentials || 'omit'\n\t    if (options.headers || !this.headers) {\n\t      this.headers = new Headers(options.headers)\n\t    }\n\t    this.method = normalizeMethod(options.method || this.method || 'GET')\n\t    this.mode = options.mode || this.mode || null\n\t    this.referrer = null\n\t\n\t    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n\t      throw new TypeError('Body not allowed for GET or HEAD requests')\n\t    }\n\t    this._initBody(body)\n\t  }\n\t\n\t  Request.prototype.clone = function() {\n\t    return new Request(this)\n\t  }\n\t\n\t  function decode(body) {\n\t    var form = new FormData()\n\t    body.trim().split('&').forEach(function(bytes) {\n\t      if (bytes) {\n\t        var split = bytes.split('=')\n\t        var name = split.shift().replace(/\\+/g, ' ')\n\t        var value = split.join('=').replace(/\\+/g, ' ')\n\t        form.append(decodeURIComponent(name), decodeURIComponent(value))\n\t      }\n\t    })\n\t    return form\n\t  }\n\t\n\t  function headers(xhr) {\n\t    var head = new Headers()\n\t    var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\\n')\n\t    pairs.forEach(function(header) {\n\t      var split = header.trim().split(':')\n\t      var key = split.shift().trim()\n\t      var value = split.join(':').trim()\n\t      head.append(key, value)\n\t    })\n\t    return head\n\t  }\n\t\n\t  Body.call(Request.prototype)\n\t\n\t  function Response(bodyInit, options) {\n\t    if (!options) {\n\t      options = {}\n\t    }\n\t\n\t    this.type = 'default'\n\t    this.status = options.status\n\t    this.ok = this.status >= 200 && this.status < 300\n\t    this.statusText = options.statusText\n\t    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)\n\t    this.url = options.url || ''\n\t    this._initBody(bodyInit)\n\t  }\n\t\n\t  Body.call(Response.prototype)\n\t\n\t  Response.prototype.clone = function() {\n\t    return new Response(this._bodyInit, {\n\t      status: this.status,\n\t      statusText: this.statusText,\n\t      headers: new Headers(this.headers),\n\t      url: this.url\n\t    })\n\t  }\n\t\n\t  Response.error = function() {\n\t    var response = new Response(null, {status: 0, statusText: ''})\n\t    response.type = 'error'\n\t    return response\n\t  }\n\t\n\t  var redirectStatuses = [301, 302, 303, 307, 308]\n\t\n\t  Response.redirect = function(url, status) {\n\t    if (redirectStatuses.indexOf(status) === -1) {\n\t      throw new RangeError('Invalid status code')\n\t    }\n\t\n\t    return new Response(null, {status: status, headers: {location: url}})\n\t  }\n\t\n\t  self.Headers = Headers\n\t  self.Request = Request\n\t  self.Response = Response\n\t\n\t  self.fetch = function(input, init) {\n\t    return new Promise(function(resolve, reject) {\n\t      var request\n\t      if (Request.prototype.isPrototypeOf(input) && !init) {\n\t        request = input\n\t      } else {\n\t        request = new Request(input, init)\n\t      }\n\t\n\t      var xhr = new XMLHttpRequest()\n\t\n\t      function responseURL() {\n\t        if ('responseURL' in xhr) {\n\t          return xhr.responseURL\n\t        }\n\t\n\t        // Avoid security warnings on getResponseHeader when not allowed by CORS\n\t        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n\t          return xhr.getResponseHeader('X-Request-URL')\n\t        }\n\t\n\t        return\n\t      }\n\t\n\t      xhr.onload = function() {\n\t        var options = {\n\t          status: xhr.status,\n\t          statusText: xhr.statusText,\n\t          headers: headers(xhr),\n\t          url: responseURL()\n\t        }\n\t        var body = 'response' in xhr ? xhr.response : xhr.responseText\n\t        resolve(new Response(body, options))\n\t      }\n\t\n\t      xhr.onerror = function() {\n\t        reject(new TypeError('Network request failed'))\n\t      }\n\t\n\t      xhr.ontimeout = function() {\n\t        reject(new TypeError('Network request failed'))\n\t      }\n\t\n\t      xhr.open(request.method, request.url, true)\n\t\n\t      if (request.credentials === 'include') {\n\t        xhr.withCredentials = true\n\t      }\n\t\n\t      if ('responseType' in xhr && support.blob) {\n\t        xhr.responseType = 'blob'\n\t      }\n\t\n\t      request.headers.forEach(function(value, name) {\n\t        xhr.setRequestHeader(name, value)\n\t      })\n\t\n\t      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n\t    })\n\t  }\n\t  self.fetch.polyfill = true\n\t})(typeof self !== 'undefined' ? self : this);\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** SPWidget.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap f7cec621c85f61851289\n **/","import 'whatwg-fetch';\n\nexport default class SPWidget {\n  constructor(params) {\n\n    this.songId = '';\n    this.primaryColor = '';\n    this.artist = '';\n    this.title = '';\n    this.previewUrl = '';\n    this.externalUrl = '';\n    this.player = new Audio();\n    this.playButton = {};\n    this.playhead = {};\n    this.timeline = {};\n    this.element = '#SPWidget';\n\n    if (params)\n    {\n      this.songId = params.songId;\n      console.log(params);\n\n\n      this.primaryColor = params.primaryColor || '#89aeed';\n      this.element = params.element || '#SPWidget';\n\n    }\n    else\n    {\n      console.error('No parameters were provided.');\n    }\n  }\n\n  togglePlay()\n  {\n    if (this.player.paused)\n    {\n      this.player.play();\n    }\n    else\n    {\n      this.player.pause();\n    }\n  }\n\n  buttonPlaying()\n  {\n    if (this.playButton)\n    {\n      //set new class of icon\n      this.playButton.children[0].setAttribute(\"class\", \"fa fa-pause\");\n      document.getElementById('bars').setAttribute(\"class\", \"playing\");\n    }\n  }\n\n  buttonPaused()\n  {\n    if (this.playButton)\n    {\n      this.playButton.children[0].setAttribute(\"class\", \"fa fa-play\");\n      document.getElementById('bars').setAttribute(\"class\", \"paused\");\n    }\n  }\n\n  updateTime()\n  {\n    var playPercent = (this.timeline.offsetWidth - this.playhead.offsetWidth) * (this.player.currentTime / this.player.duration);\n    this.playhead.style.left = playPercent + \"px\";\n\n  }\n\n  start()\n  {\n    var songPromise = getSongData(this.songId);\n    songPromise.then((result) =>\n    {\n\n      this.title = result.name;\n      this.artist = result.artists[0].name;\n      this.imageUrl = result.album.images[0].url;\n      this.externalUrl = result.external_urls.spotify;\n      this.previewUrl = result.preview_url;\n      this.player.src = result.preview_url;\n\n      this.player.onplay = () => this.buttonPlaying();\n      this.player.onpause = () => this.buttonPaused();\n      this.player.ontimeupdate = () => this.updateTime();\n\n      console.log(this);\n      this.displayPlayer();\n\n    });\n  }\n\n\n\n  displayPlayer()\n  {\n    var widget = document.querySelector(this.element);\n    if (widget)\n    {\n      var htmlString = `<img id=\"album-image\" src=${this.imageUrl}></img>\n                        <a href=\"${this.externalUrl}\" class=\"link-to-song\"><i class=\"fa fa-spotify\"></i></a>\n                        <div id=\"info\">\n                            <div id=\"bars\">\n                                <div class=\"bar one\"></div>\n                                <div class=\"bar two\"></div>\n                                <div class=\"bar three\"></div>\n                            </div>\n                            <div class=\"artist\">${this.artist}</div>\n                            <div class=\"song-name\">${this.title}</div>\n                            <div id=\"play-button\" class=\"paused\">\n                                <i class=\"fa fa-play\"></i>\n                            </div>\n                            <div id=\"timeline\">\n                                <div id=\"playhead\"></div>\n                            </div>\n                        </div>`;\n\n\n      widget.innerHTML = htmlString;\n\n\n      this.playButton = document.getElementById('play-button');\n      this.playhead = document.getElementById('playhead');\n      this.timeline = document.getElementById('timeline');\n\n\n      widget.style.background = this.primaryColor;\n\n\n      this.playButton.onclick = () => this.togglePlay();\n\n\n    } else\n    {\n      console.log('No div with id SPWidget was found');\n    }\n  }\n\n}\n\n\nfunction getSongData(songId)\n{\n  var url = `https://api.spotify.com/v1/tracks/${songId}`;\n\n  return fetch(url).then((response) =>\n  {\n    if (response.ok)\n    {\n      return response.json();\n    }\n    else\n    {\n      console.error('Error in song id entered: ' + this.songId);\n    }\n\n  }).then( (data) => {\n    return data;\n  });\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/index.js\n **/","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var list = this.map[name]\n    if (!list) {\n      list = []\n      this.map[name] = list\n    }\n    list.push(value)\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    var values = this.map[normalizeName(name)]\n    return values ? values[0] : null\n  }\n\n  Headers.prototype.getAll = function(name) {\n    return this.map[normalizeName(name)] || []\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = [normalizeValue(value)]\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n      this.map[name].forEach(function(value) {\n        callback.call(thisArg, value, name, this)\n      }, this)\n    }, this)\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    reader.readAsArrayBuffer(blob)\n    return fileReaderReady(reader)\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    reader.readAsText(blob)\n    return fileReaderReady(reader)\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (!body) {\n        this._bodyText = ''\n      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {\n        // Only support ArrayBuffers for POST method.\n        // Receiving ArrayBuffers happens via Blobs, instead.\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n\n      this.text = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return readBlobAsText(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as text')\n        } else {\n          return Promise.resolve(this._bodyText)\n        }\n      }\n    } else {\n      this.text = function() {\n        var rejected = consumed(this)\n        return rejected ? rejected : Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n    if (Request.prototype.isPrototypeOf(input)) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = input\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this)\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function headers(xhr) {\n    var head = new Headers()\n    var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\\n')\n    pairs.forEach(function(header) {\n      var split = header.trim().split(':')\n      var key = split.shift().trim()\n      var value = split.join(':').trim()\n      head.append(key, value)\n    })\n    return head\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = options.statusText\n    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request\n      if (Request.prototype.isPrototypeOf(input) && !init) {\n        request = input\n      } else {\n        request = new Request(input, init)\n      }\n\n      var xhr = new XMLHttpRequest()\n\n      function responseURL() {\n        if ('responseURL' in xhr) {\n          return xhr.responseURL\n        }\n\n        // Avoid security warnings on getResponseHeader when not allowed by CORS\n        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n          return xhr.getResponseHeader('X-Request-URL')\n        }\n\n        return\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: headers(xhr),\n          url: responseURL()\n        }\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/whatwg-fetch/fetch.js\n ** module id = 1\n ** module chunks = 0\n **/"],"sourceRoot":""}